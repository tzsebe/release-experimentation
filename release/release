#!/bin/bash
set -e

function die() {
  echo -e >&2 "$@"
  exit 1
}


command -v git > /dev/null 2>&1 || die "git is not installed. Bailing!"
command -v go > /dev/null 2>&1 || die "go is not installed. Bailing!"
command -v virtualenv > /dev/null 2>&1 || die "virtualenv is not installed. Bailing!"

BUILD_PLATFORMS=(linux_amd64 windows_amd64)
GIT_COMMIT_ID=$1
GIT_REPO_NAME=tzsebe/release-experimentation
API_TOKEN_FILE=$HOME/.github-release-api-token
RELEASE_VIRTUALENV_DIR=$HOME/virtual-envs/tzsebe-releaser
SOURCE_DIR=$(go env GOPATH)/src/github.com/tzsebe/release-experimentation
RELEASE_DIR=$SOURCE_DIR/release
WORKING_DIR=$RELEASE_DIR/tmp-release-ephemeral
REPO_DIR=$WORKING_DIR/repo
ARTIFACT_DIR=$WORKING_DIR/build_artifacts
MAIN_SOURCE=hello/hello.go
BINARY_NAME=hello
BINARY_PATH=$BINARY_NAME/bin
ASSET_DIR=$WORKING_DIR/assets


[[ -d $SOURCE_DIR ]] || die "Directory $SOURCE_DIR does not exist."
[[ -d $RELEASE_DIR ]] || die "Directory $RELEASE_DIR does not exist."
[[ -f $API_TOKEN_FILE ]] || die "File $API_TOKEN_FILE does not exist."
[[ $(stat --format '%a' $API_TOKEN_FILE) == "400" ]] || die "File $API_TOKEN_FILE must have mode '400'"
[[ $GIT_COMMIT_ID =~ ^[0-9a-f]{40}$ ]] || die "First argument should be git commit ID."

# Clean up any old release work, and start fresh.
echo "Retrieving code to release..."
rm -rf $WORKING_DIR
mkdir -p $REPO_DIR
pushd $REPO_DIR > /dev/null
git clone git@github.com:$GIT_REPO_NAME.git .
git checkout $GIT_COMMIT_ID
echo "Done retrieving code."
echo ""

# Run tests - Never allow releases that fail unit tests.
echo "Running unit tests..."
go test ./... || die "\nUnit tests are failing. Not allowing release to proceed."
echo "Done running tests."
echo ""

# Build for every OS/Arch combination we support.
echo "Building release assets..."
mkdir -p $ASSET_DIR
for os_arch in ${BUILD_PLATFORMS[@]}; do
  build_os=$(echo $os_arch | cut -f1 -d_)
  build_arch=$(echo $os_arch | cut -f2 -d_)
  echo "Building for $build_os/$build_arch..."
  mkdir -p $ARTIFACT_DIR/$os_arch

  if [[ $build_os == "windows" ]]; then
    GOOS=$build_os GOARCH=$build_arch go build -o $ARTIFACT_DIR/$os_arch/$BINARY_PATH/$BINARY_NAME.exe $MAIN_SOURCE
    pushd $ARTIFACT_DIR/$os_arch > /dev/null
    zip -r -q $ASSET_DIR/$BINARY_NAME-$os_arch.zip $BINARY_NAME > /dev/null
    popd > /dev/null
  else
    GOOS=$build_os GOARCH=$build_arch go build -o $ARTIFACT_DIR/$os_arch/$BINARY_PATH/$BINARY_NAME $MAIN_SOURCE
    tar -czf $ASSET_DIR/$BINARY_NAME-$os_arch.tar.gz -C $ARTIFACT_DIR/$os_arch $BINARY_NAME
  fi
done
popd > /dev/null

echo "Done building."
echo ""

# If the virtual environment doesn't exist, create it.
if [[ ! -d $RELEASE_VIRTUALENV_DIR ]]; then
  echo "Creating virtualenv at $RELEASE_VIRTUALENV_DIR..."
  mkdir -p $RELEASE_VIRTUALENV_DIR
  virtualenv $RELEASE_VIRTUALENV_DIR
fi

# Install dependencies and run our actual release creation.
(
  source $RELEASE_VIRTUALENV_DIR/bin/activate
  [[ ! -z $VIRTUAL_ENV ]] || die "Failed to activate virtual environment!"
  echo "Checking for dependencies in environment $VIRTUAL_ENV"
  cd $RELEASE_DIR
  pip install -r requirements.txt
  echo "Done with setup."
  echo ""
  python release.py $API_TOKEN_FILE $GIT_REPO_NAME $GIT_COMMIT_ID $ASSET_DIR
)

echo "Done!"
